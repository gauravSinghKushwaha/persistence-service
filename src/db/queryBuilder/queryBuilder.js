const conf = require('./../../config/config');
const log = require('./../../log/logger');
const DOT = ".";
const SPACE = " ";

function query(req, res, resSchema) {
    this.req = req;
    this.res = res;
    this.resSchema = resSchema;
    this.body = req.body;
    this.dbTable = this.body.table;
    this.dbSchema = this.body.schema;
    this.cols = this.body.attr;
}
/**
 * Creates insert query
 * @returns {{where: string, values: Array}}
 */
query.prototype.createInsertQuery = function () {
    //console.log('req =' + this.req.toString() + '\nres =' + this.res.toString());
    //console.log('resSchema =' + JSON.stringify(this.resSchema));
    //console.log('body = ' + JSON.stringify(this.body));
    //console.log('dbTable= ' + this.dbTable + '\ndbSchema= ' + this.dbSchema);

    const conditions = [];
    const values = [];
    const queryStr = 'insert into ' + this.dbTable + DOT + this.dbSchema + SPACE + '(';
    const schemaCols = this.resSchema.properties.attr.properties;
    const schemaConf = this.resSchema.properties.conf.properties;
    const objectKeys = Object.keys(this.cols);
    const schemaKeys = Object.keys(schemaCols);

    console.log('objectKeys = ' + objectKeys);
    console.log('schemaKeys = ' + schemaKeys);
    console.log('schemaConf.hashobjs =' + JSON.stringify(schemaConf.hashobjs));
    console.log('schemaConf.encryptobjs = ' + JSON.stringify(schemaConf.encryptobjs));
    console.log('schemaConf.autogenerated = ' + JSON.stringify(schemaConf.autogenerated));
    console.log('cols= ' + JSON.stringify(this.cols));
    console.log('schemaCols = ' + JSON.stringify(schemaCols));

    schemaKeys.forEach(function (k) {
        console.log('k = ' + k);
        console.log('this.cols[k] = ' + this.cols[k]);
        console.log('schemaCols[k].optional = ' + schemaCols[k].optional);

        const colValue = this.cols[k] != null ? this.cols[k] : (schemaCols[k].optional != null ? schemaCols[k].optional != null : null);
        if (colValue != null) {
            if (schemaConf.hashobjs != null && schemaConf.hashobjs.contains(k)) {
                conditions.push(k);
                values.push(this.cols[k]);
            } else if (schemaConf.encryptobjs != null && schemaConf.encryptobjs.contains(k)) {
                conditions.push(k);
                values.push(this.cols[k]);
            } else if (schemaConf.autogenerated == null || !schemaConf.autogenerated.contains(k)) {
                conditions.push(k);
                values.push(this.cols[k]);
            }
        }
    });
    console.log('conditions = ' + conditions + ' \nvalues = ' + values);
    /*
     if (typeof params.name !== 'undefined') {
     conditions.push("name LIKE ?");
     values.push("%" + params.name + "%");
     }

     if (typeof params.age !== 'undefined') {
     conditions.push("age = ?");
     values.push(parseInt(params.age));
     }

     return {
     where: conditions.length ?
     conditions.join(' AND ') : '1',
     values: values
     }; */
}

module.exports = query;